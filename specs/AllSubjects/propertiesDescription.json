[{"repoName": "dataModel.User", "repoLink": "https://github.com/smart-data-models/dataModel.User.git", "dataModel": "Activity", "descriptionAvailable": [{"activityType": "The action performed (e.g. Drive)."},
 {"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateActivityEnded": "Activity's end timestamp."},
 {"dateActivityStarted": "Activity's start timestamp."},
 {"description": "A description of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"refAgent": "Reference to the agent (i.e. a person) performing the activity. It may be another NGSI Entity or any Agent identified by an URI."},
 {"refObject": "Reference to the object of the action (e.g. Car1). It may be another NGSI Entity or any Object identified by an URI."},
 {"refTarget": "Reference to the target of the action (e.g. Office1)."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.User", "repoLink": "https://github.com/smart-data-models/dataModel.User.git", "dataModel": "UserContext", "descriptionAvailable": [{"address": "The mailing address."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"refActivity": "An object representing the current activity performed by the User"},
 {"refUserDevice": "An object representing the current device used by the User."},
 {"refUser": "reference to the (anonymised) User to which this UserContext is associated."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["alternateName", "areaServed"]},
 {"repoName": "dataModel.PointOfInteraction", "repoLink": "https://github.com/smart-data-models/dataModel.PointOfInteraction.git", "dataModel": "SmartPointOfInteraction", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"applicationUrl": "This field specifies the real URL containing the solution or application"},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"availability": "Specifies the functionality intervals in which the announcements will be\nsent"},
 {"category": "Defines the type of interaction"},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"refRelatedEntity": "List of entities improved with this Smart Point of Interaction. The\nentity type could be any such as a \u201cParking\u201d, \u201cPoint of Interest\u201d, etc"},
 {"refSmartSpot": "Reference to one or more entity of type SmartSpot"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.PointOfInteraction", "repoLink": "https://github.com/smart-data-models/dataModel.PointOfInteraction.git", "dataModel": "SmartSpot", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"announcedUrl": "URL broadcasted by the device"},
 {"announcementPeriod": "Period between announcements in milliseconds"},
 {"availability": "Specifies the time intervals in which this interactive service is\navailable, but this is a general information while Smart Spots have\ntheir own real availability in order to allow advanced configurations"},
 {"bluetoothChannel": "Bluetooth channels where to transmit the announcement"},
 {"coverageRadius": "Radius of the spot coverage area in meters"},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"signalStrength": "Signal strength to adjust the announcement range"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.KeyPerformanceIndicator", "repoLink": "https://github.com/smart-data-models/dataModel.KeyPerformanceIndicator.git", "dataModel": "keyPerformanceIndicator", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["aggregatedData", "area", "businessTarget", "calculationFrequency", "calculationPeriod", "calculatedBy", "calculationMethod", "calculationFormula", "category", "currentStanding", "dateExpires", "dateNextCalculation", "effectiveSince", "kpiValue", "organization", "process", "product", "provider"]},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "ArrivalEstimation", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasStop": "Stop to which this estimation applies to."},
 {"hasTrip": "The trip to which this estimation applies to."},
 {"headsign": "It shall contain the text that appears on a sign that identifies the trip s destination to passengers."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"remainingDistance": "It shall contain the remaining distance (in meters) of arrival for the trip heading to the concerned stop."},
 {"remainingTime": "It shall contain the remaining time of arrival for the trip heading to the concerned stop."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsAccessPoint", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["code", "hasParentStation", "page", "wheelChairAccessible", "zoneCode"]},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsAgency", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"language": "Same as GTFS agency_language."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"page": "Same as GTFS agency_url."},
 {"phone": "Same as GFTS agency_phone."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"timezone": "Same as GTFS agency_timezone."}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsCalendarDateRule", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"appliesOn": "Date (in YYYY-MM-DD format) this rule applies to. It shall be obtained from the GTFS date field"},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"exceptionType": "Same as GTFS exception_type field. Allowed values: (\"1\", \"2\")"},
 {"hasService": "Service to which this rule applies to. Derived from service_id."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsCalendarRule", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"endDate": "End date of this rule in `YYYY-MM-DD` format. It can be obtained\nfrom the field `end_date` of\n[calendar.txt](https://developers.google.com/transit/gtfs/reference/#calendartxt)"},
 {"friday": "Same as GTFS friday"},
 {"hasService": "Service to which this rule applies to. Derived from service_id."},
 {"monday": "Same as GTFS monday"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"saturday": "Same as GTFS saturday"},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"startDate": "Start date of this rule in YYYY-MM-DD format. It can be obtained from the field start_date of calendar.txt."},
 {"sunday": "Same as GTFS sunday"},
 {"thursday": "Same as GTFS thursday"},
 {"tuesday": "Same as GTFS tuesday"},
 {"wednesday": "Same as GTFS wednesday"}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsFrequency", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"endTime": "Same as GTFS end_time. See format."},
 {"exactTimes": "Same as GTFS exact_times but encoded as a Boolean: false: Frequency-based trips are not exactly scheduled. true: Frequency-based trips are exactly scheduled."},
 {"hasTrip": "Trip associated to this Entity."},
 {"headwaySeconds": "Same as GTFS headway_secs."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"startTime": "Same as GTFS start_time. See format."}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsRoute", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"name": "The name of the item"},
 {"operatedBy": "Agency that operates this route."},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsService", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"name": "The name of the item"},
 {"operatedBy": "Agency that operates this service."},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsShape", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"name": "The name of the item"},
 {"operatedBy": "Agency that operates this service."},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsStation", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasAccessPoint": "It shall point to another Entity(ies) of type GtfsAccessPoint"},
 {"hasStop": "It shall point to another Entity(ies) of type GtfsStop"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["code", "hasParentStation", "page", "wheelChairAccessible", "zoneCode"]},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsStop", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"code": "Same as GTFS stop_code."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasParentStation": "Same as GTFS parent_station."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"operatedBy": "Agency that operates this stop."},
 {"owner": "The owner of the item."},
 {"page": "Same as GTFS stop_url."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"wheelChairAccessible": "Same as GTFS wheelchair_boarding."},
 {"zoneCode": "Transport zone to which this stop belongs to. Same as GTFS zone_id."}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsStopTime", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"arrivalTime": "Same as GTFS arrival_time"},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"departureTime": "Same as GTFS departure_time"},
 {"description": "A description of the item"},
 {"distanceTravelled": "Same as GTFS shape_dist_traveled."},
 {"hasStop": "Same as GTFS stop_id"},
 {"hasTrip": "Same as GTFS trip_id."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"pickupType": "Same as GTFS pickup_type."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"stopHeadsign": "Same as GTFS stop_headsign"},
 {"stopSequence": "Same as GTFS stop_sequence"},
 {"timepoint": "Same as GTFS timepoint."}], "descriptionMissing": ["dropOffType"]},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsTransferRule", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasDestination": "Trip associated to this Entity."},
 {"hasOrigin": "Trip associated to this Entity."},
 {"minimumTransferTime": "Same as GTFS min_transfer_time."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"transferType": "Same as GTFS transfer_type."}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "GtfsTrip", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"block": "Same as GTFS block_id."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"direction": "Same as GTFS direction_id."},
 {"hasRoute": "Same as route_id."},
 {"hasService": "Same as GTFS service_id."},
 {"hasShape": "Same as GTFS shape_id."},
 {"headSign": "Same as GTFS trip_headsign."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"shortName": "Same as GTFS trip_short_name."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "PublicTransportRoute", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["routeCode", "routeColor", "routeSegments", "routeTextColor", "schedule", "shortRouteCode", "transportationType"]},
 {"repoName": "dataModel.UrbanMobility", "repoLink": "https://github.com/smart-data-models/dataModel.UrbanMobility.git", "dataModel": "PublicTransportStop", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["openingHoursSpecification", "peopleCount", "refPeopleCountDevice", "refPublicTransportRoute", "shortStopCode", "stopCode", "transportationType", "wheelchairAccessible"]},
 {"repoName": "dataModel.ParksAndGardens", "repoLink": "https://github.com/smart-data-models/dataModel.ParksAndGardens.git", "dataModel": "FlowerBed", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "annotations of this flower bed."},
 {"areaServed": "areaServed of this flower bed."},
 {"category": "Category of this flower bed."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"nextWateringDeadline": "Deadline for next watering operation."},
 {"openingHours": "The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day."},
 {"owner": "The owner of the item."},
 {"refRecord": "List of records which contain measurements related to this flower bed."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["color", "dateLastWatering", "image", "style"]},
 {"repoName": "dataModel.ParksAndGardens", "repoLink": "https://github.com/smart-data-models/dataModel.ParksAndGardens.git", "dataModel": "Garden", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"category": "Category of the Garden."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateLastWatering": "Timestamp which corresponds to the last watering of this garden."},
 {"description": "A description of the item"},
 {"image": "The image of the product."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"nextWateringDeadline": "Deadline for next watering operation to be done on this garden."},
 {"openingHours": "The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day."},
 {"owner": "The owner of the item."},
 {"refRecord": "List of records which contain measurements related to this garden."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["style"]},
 {"repoName": "dataModel.ParksAndGardens", "repoLink": "https://github.com/smart-data-models/dataModel.ParksAndGardens.git", "dataModel": "GreenspaceRecord", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateObserved": "The date and time of this observation in ISO8601 UTCformat."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"soilMoistureEc": "The observed soild moisture measured as Electrical Conductivity, EC in units of Siemens per meter (S/m)."},
 {"soilMoistureVwc": "The observed soil moisture measured as Volumetric Water Content, VWC (percentage, expressed in parts per one)."},
 {"soilTemperature": "The observed soil temperature in Celsius degrees."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["image"]},
 {"repoName": "dataModel.Aquaculture", "repoLink": "https://github.com/smart-data-models/dataModel.Aquaculture.git", "dataModel": "BreedingOperation", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["category", "endpoint", "version"]},
 {"repoName": "dataModel.Aquaculture", "repoLink": "https://github.com/smart-data-models/dataModel.Aquaculture.git", "dataModel": "FishContainment", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["category", "endpoint", "version"]},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriApp", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["category", "endpoint", "version"]},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriCrop", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"harvestingInterval": "A list of the recommended harvesting interval date(s) for this crop. Specified using ISO8601 repeating date intervals:\n\n*interval, description*\n\nWhere interval is in the form of start date/end date\n\n`--MM-DD/--MM-DD`\n\nMeaning repeat each year from this start date to this end date."},
 {"hasAgriFertiliser": "Reference to the recommended types of fertiliser suitable for growing this crop."},
 {"hasAgriPest": "Reference to the pests known to attack this crop."},
 {"hasAgriSoil": "Reference to the recommended types of soil suitable for growing this crop."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"plantingFrom": "A list of the recommended planting interval date(s) for this crop. Specified using ISO8601 repeating date intervals:\n\n*interval, description*\n\nWhere interval is in the form of start date/end date\n\n`--MM-DD/--MM-DD`\n\nMeaning repeat each year from this start date to this end date."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"wateringFrequency": "A description of the recommended watering schedule. A choice from an enumerated list. One of: *daily, weekly, biweekly, monthly, onDemand, other*"}], "descriptionMissing": ["agroVocConcept"]},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriFarm", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"contactPoint": "Contact information of the farm i.e email, telephone, etc"},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasAgriParcel": "List of agri parcels belonging to the farm"},
 {"hasBuilding": "List of buildings belonging to the farm"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriGreenhouse", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"co2": "The measured interior C02 concentration nominally in mg/L."},
 {"dailyLight": "Daily Accumulated light measured in kW per square metre"},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"drainFlow": "The observed drain flow rate in litres per second"},
 {"hasAgriParcelChildren": "Related sub AgriParcel records to which this entity relates."},
 {"hasDevice": "Reference to the IoT devices associated with this greenhouse i.e. sensors, controls."},
 {"hasWaterQualityObserved": "Reference to one or more water quality observation records current for this entity."},
 {"leafTemperature": "The average greenhouse air temperature nominally in degrees centigrade."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"relativeHumidity": "The inside relative humidity expressed as a number between 0 and 1 representing the range 0% to 100 (%).\n\n0 \u2264 relativeHumidity \u2264 1"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriParcel", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"area": "The area of the parcel nominally in square meters."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"cropStatus": "A choice from an enumerated list describing the crop planting status One of: seeded, justBorn, growing, maturing, readyForHarvesting."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasAgriParcelChildren": "An optional reference to lower level (child) AgriParcel records to which this entity relates."},
 {"hasDevices": "Reference to the IoT devices associated with this parcel i.e. sensors, controls."},
 {"lastPlantedAt": "Indicates the date when the crop was last planted."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriParcelOperation", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"endedAt": "Timestamp when the operation actually finished."},
 {"name": "The name of the item"},
 {"operationType": "A choice from an enumerated list describing the operation performed on the parcel. One of: fertiliser, inspection, pesticide, water, other."},
 {"owner": "The owner of the item."},
 {"plannedEndAt": "The planned end date/timestamp for the operation.Note that this is advisory and the actual time the operation finishes may be before or after the planned end."},
 {"plannedStartAt": "The planned start date/timestamp for the operation.Note that this is advisory and the actual time the operation starts may be before or after the planned start."},
 {"quantity": "The total quantity of water or product used/ applied. It is recommended this is measured in litres for liquids or kilogrammes for solids."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"reportedAt": "Timestamp when the event/ fault was reported."},
 {"result": "A description of the results of the operation. One of: ok, aborted, failed."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"startedAt": "Timestamp when the operation actually started to be performed."},
 {"status": "A choice from an enumerated list describing the status. One of: planned, ongoing, finished, scheduled, cancelled."},
 {"watersource": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["irrigationRecord", "workOrder", "workRecord"]},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriParcelRecord", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"atmosphericPressure": "Atmospheric Pressure nominally in units of hecto Pascals."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"depth": "Metadata to indicate the associated depth where soil measurements are\ntaken"},
 {"description": "A description of the item"},
 {"hasDevice": "Reference to the IoT devices associated with this greenhouse i.e. sensors, controls."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"observedAt": "Indicates the date/time the record was observed/ last observed."},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"relativeHumidity": "Relative Humidity a number between 0 and 1 representing the range of 0% to 100%. 0 \u2264 relativeHumidity \u2264 1"},
 {"soilMoistureEC": "Measured as Electrical Conductivity, EC nominally in units of Siemens per meter (S/m)."},
 {"soilMoistureVwc": "Measured as Volumetric Water Content, VWC as a percentage. 0 \u2264soilMoistureVwc \u2264 1"},
 {"soilTemperature": "The observed soil temperature nominally in degrees centigrade."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["leafRelativeHumidity", "leafTemperature", "leafWetness", "soilSalinity", "solarRadiaton"]},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriPest", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasAgriProductType": "Reference to the recommended types of product that can be used to treat this pest."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["agroVocConcept"]},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriProductType", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasAgriProductTypeChildren": "Reference to child product types i.e. immediately below this entity in the hierarchy."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"root": "A logical indicator that this product is the root of an AgriProductType hierarchy. Logical true indicates it is the root."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["agroVocConcept", "category"]},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "AgriSoil", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"hasAgriProductType": "Reference to the recommended types of product (such as fertiliser) that can be used to condition this soil type."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["agroVocConcept"]},
 {"repoName": "dataModel.Agrifood", "repoLink": "https://github.com/smart-data-models/dataModel.Agrifood.git", "dataModel": "Animal", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"relatedSource": "List of IDs the current entity may have in external applications"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["agroVocConcept", "hasAgriProductType"]},
 {"repoName": "dataModel.WaterNetworkManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WaterNetworkManagement.git", "dataModel": "Curve", "descriptionAvailable": [{"description": "A description of the item"}], "descriptionMissing": ["curveType", "tag", "xData", "yData"]},
 {"repoName": "dataModel.WaterNetworkManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WaterNetworkManagement.git", "dataModel": "Junction", "descriptionAvailable": [{"address": "The mailing address."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"}], "descriptionMissing": ["demandeCategory", "elevation", "emitterCoefficient", "initialQuality", "sourceCategory", "tag"]},
 {"repoName": "dataModel.WaterNetworkManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WaterNetworkManagement.git", "dataModel": "Pattern", "descriptionAvailable": [{"description": "A description of the item"},
 {"multipliers": "Multipliers define how some base quantity (e.g., demand) is adjusted for each time period"},
 {"startTime": "The time at which the pattern starts"},
 {"tag": "An optional text string used to assign the junction to a category, such as a pressure zone"},
 {"timeStep": "The time step used for the multipliers."}], "descriptionMissing": []},
 {"repoName": "dataModel.WaterNetworkManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WaterNetworkManagement.git", "dataModel": "Pipe", "descriptionAvailable": [{"bulkCoeff": "The bulk reaction coefficient for the pipe. Use a positive value for growth and a negative value for decay"},
 {"createdAt": "Entity's creation timestamp."},
 {"diameter": "The pipe diameter"},
 {"endsAt": "The ID of the node where the pipe ends.\nReference to an entity of type `Node (Reservoir, Junction, Tank)`"},
 {"initialStatus": "Determines whether the pipe is initially open, closed, or contains a check valve.\nValues are restricted to: \"OPEN\",\"CLOSED\",\"CV\""},
 {"length": "The actual length of the pipe"},
 {"minorLoss": "Unitless minor loss coefficient associated with bends, fittings, etc."},
 {"roughness": "he roughness coefficient of the pipe. It is unitless for Hazen-Williams or Chezy-Manning roughness and has \nunits of millifeet (mm) for Darcy-Weisbach roughness.\nAll units are accepted in [CEFACT](https://www.unece.org/cefact.html) code"},
 {"startsAt": "The ID of the node where the pipe begins.\nReference to an entity of type `Node (Reservoir, Junction, Tank)`"},
 {"status": "Dynamic state of the pipe.\nValues are restricted to: \"OPEN\",\"CLOSED\",\"CV\""},
 {"tag": "An optional text string used to assign the pipe to a category, perhaps one based on age or material"},
 {"wallCoeff": "The wall reaction coefficient for the pipe. Use a positive value for growth and a negative value for decay."}], "descriptionMissing": ["modifiedAt", "observedAt"]},
 {"repoName": "dataModel.WaterNetworkManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WaterNetworkManagement.git", "dataModel": "Pump", "descriptionAvailable": [{"efficCurve": "The ID label of the curve that represents the pump's wire-to-water efficiency as a function of flow rate"},
 {"endsAt": "The ID of the node on the discharge side of the pump\nReference to an entity of type `Node (Reservoir, Junction, Tank)`"},
 {"energyPattern": "The ID label of the time pattern used to describe the variation in energy price throughout the day"},
 {"energyPrice": "The average or nominal price of energy in monetary units per kw-hr.\nAll units are accepted in [CEFACT](https://www.unece.org/cefact.html) code"},
 {"headCurve": "The ID label of the pump curve used to describe the relationship between the head delivered by \nthe pump and the flow through the pump"},
 {"initialStatus": "State of the pump (open or closed) at the start of the simulation period.\nValues are restricted to: \"OPEN\",\"CLOSED\",\"CV\""},
 {"power": "The power supplied by the pump.\nAll units are accepted in [CEFACT](https://www.unece.org/cefact.html) code"},
 {"pumpPattern": "The ID label of a time pattern used to control the pump's operation. The multipliers of the pattern are equivalent to speed settings. A multiplier of zero implies that the pump will be \nshut off during the corresponding time period"},
 {"speed": "The relative speed setting of the pump."},
 {"startsAt": "The ID of the node on the suction side of the pump.\n Reference to an entity of type `Node (Reservoir, Junction, Tank)`"},
 {"status": "Dynamic state of the pump. \nValues are restricted to: \"OPEN\",\"CLOSED\",\"CV\""},
 {"tag": "An optional text string used to assign the pump to a category, perhaps based on age, size or location"}], "descriptionMissing": []},
 {"repoName": "dataModel.WaterNetworkManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WaterNetworkManagement.git", "dataModel": "Reservoir", "descriptionAvailable": [{"address": "The mailing address."}], "descriptionMissing": ["demandCategory", "description", "elevation", "emitterCoefficient", "headPattern", "initialQuality", "reservoirHead", "sourceCategory", "tag"]},
 {"repoName": "dataModel.WaterNetworkManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WaterNetworkManagement.git", "dataModel": "Tank", "descriptionAvailable": [{"address": "The mailing address."}], "descriptionMissing": ["baseDemand", "bulkReactionCoefficient", "description", "elevation", "initLevel", "initialQuality", "maxLevel", "minLevel", "minVolume", "mixingFraction", "mixingModel", "nominalDiameter", "sourceCategory", "tag", "volumeCurve"]},
 {"repoName": "dataModel.WaterNetworkManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WaterNetworkManagement.git", "dataModel": "Valve", "descriptionAvailable": [{"diameter": "The valve diameter. All units are accepted in [CEFACT](https://www.unece.org/cefact.html) code"},
 {"endsAt": "The ID of the node on the nominal downstream or discharge side of the valve.\nReference to an entity of type `Node (Reservoir, Junction, Tank)`"},
 {"initialStatus": "Valve status at the start of the simulation. If set to OPEN or CLOSED then the control setting of the valve is ignored and the valve behaves as an open or closed link, respectively. \nIf set to NONE, then the valve will behave as intended.\nValues are resrtricted to: \"OPEN\",\"CLOSED\",\"NONE\"."},
 {"minorLoss": "Unitless minor loss coefficient that applies when the valve is completely opened.\n All units are accepted in [CEFACT](https://www.unece.org/cefact.html) code."},
 {"setting": "A parameter that describes the valve's operational setting.\nAll units are accepted in [CEFACT](https://www.unece.org/cefact.html) code"},
 {"startsAt": "The ID of the node on the nominal upstream or inflow side of the valve.\nReference to an entity of type `Node (Reservoir, Junction, Tank)`"},
 {"status": "Dynamic state of the valve.\nValues are resrtricted to: \"OPEN\",\"CLOSED\",\"NONE\""},
 {"tag": "An optional text string used to assign the valve to a category, perhaps based on type or location."},
 {"valveType": "The valve type. Values are resrtricted to: \"PRV\", \"PSV\",\"PBV\",\"FCV\",\"TCV\" and\"GPV\""}], "descriptionMissing": []},
 {"repoName": "dataModel.Parking", "repoLink": "https://github.com/smart-data-models/dataModel.Parking.git", "dataModel": "OffStreetParking", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"openingHours": "The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day."},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["acceptedPaymentMethod", "aggregateRating", "allowedVehicleType", "availableSpotNumber", "averageSpotLength", "averageSpotWidth", "category", "chargeType", "contactPoint", "extCategory", "extraSpotNumber", "facilities", "firstAvailableFloor", "highestFloor", "layout", "lowestFloor", "maximumAllowedHeight", "maximumAllowedWidth", "maximumParkingDuration", "measuresPeriod", "measuresPeriodUnit", "occupancyDetectionType", "parkingMode", "priceCurrency", "priceRatePerMinute", "provider", "requiredPermit", "reservationType", "security", "specialLocation", "status", "totalSpotNumber", "usageScenario"]},
 {"repoName": "dataModel.Parking", "repoLink": "https://github.com/smart-data-models/dataModel.Parking.git", "dataModel": "OnStreetParking", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Parking", "repoLink": "https://github.com/smart-data-models/dataModel.Parking.git", "dataModel": "ParkingAccess", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Parking", "repoLink": "https://github.com/smart-data-models/dataModel.Parking.git", "dataModel": "ParkingGroup", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Parking", "repoLink": "https://github.com/smart-data-models/dataModel.Parking.git", "dataModel": "ParkingSpot", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["TimeInstant", "category", "image", "length", "refDevice", "status", "width"]},
 {"repoName": "dataModel.Weather", "repoLink": "https://github.com/smart-data-models/dataModel.Weather.git", "dataModel": "WeatherAlert", "descriptionAvailable": [], "descriptionMissing": ["subCategory"]},
 {"repoName": "dataModel.Weather", "repoLink": "https://github.com/smart-data-models/dataModel.Weather.git", "dataModel": "WeatherForecast", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateIssued": "The date and time the forecast was issued by the meteorological bureau in ISO8601 UTC format."},
 {"dateRetrieved": "The date and time the forecast was retrieved in ISO8601 UTC format."},
 {"dayMaximum": "Maximum values for the reported period."},
 {"dayMinimum": "Minimum values forecasted for the reported period"},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"precipitationProbability": "The probability of precipitation, expressed as a number between 0 \u2264 precipitationProbability \u2264 1."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"uVIndexMax": "The maximum UV index for the period, based on the World Health Organization's UV Index measure."},
 {"validFrom": "The start of the validity period for this forecast as a ISO8601 format"},
 {"validTo": "The end of the validity period for this forecast as a ISO8601 format"},
 {"validity": "Includes the validity period for this forecast as a ISO8601\ntime interval. As a workaround for the lack of support of Orion Context\nBroker for datetime intervals, it can be used two separate attributes"}], "descriptionMissing": []},
 {"repoName": "dataModel.Weather", "repoLink": "https://github.com/smart-data-models/dataModel.Weather.git", "dataModel": "WeatherObserved", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"atmosphericPressure": "The atmospheric pressure observed measured in Hecto Pascals."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateObserved": "The date and time the observation was made in ISO8601 UTC format."},
 {"description": "A description of the item"},
 {"dewPoint": "The dew point encoded as a number. Celsius degrees."},
 {"illuminance": "(https://en.wikipedia.org/wiki/Illuminance) observed measured in lux (lx) or lumens per square metre (cd\u00b7sr\u00b7m\u22122)"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"precipitation": "Air's temperature observed. Liters per square meter."},
 {"pressureTendency": "Is the pressure rising or falling? It can be expressed in quantitative terms or qualitative terms.\n\n- `falling`\n- `raising`\n- `steady`"},
 {"snowHeight": "The snow height observed by generic snow depth measurement sensors, expressed in centimeters"},
 {"solarRadiation": "The solar radiation observed measured in Watts per square meter."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"streamGauge": "The water level surface elevation observed by Hydrometric\nmeasurement sensors, namely a [Stream Gauge](https://en.wikipedia.org/wiki/Stream_gauge),\nexpressed in centimeters."},
 {"uVIndexMax": "The maximum UV index for the period, based on the World Health Organization's UV Index measure. \n[http://www.who.int/uv/intersunprogramme/activities/uv_index/en/](http://www.who.int/uv/intersunprogramme/activities/uv_index/en/)"}], "descriptionMissing": []},
 {"repoName": "dataModel.WasteManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WasteManagement.git", "dataModel": "WasteContainer", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"image": "The image of the product."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["TimeInstant", "actuationHours", "cargoWeight", "category", "dateLastCleaning", "dateLastEmptying", "dateServiceStarted", "fillingLevel", "isleId", "methaneConcentration", "nextActuationDeadline", "nextCleaningDeadline", "refDevice", "regulation", "responsible", "serialNumber", "status", "storedWasteCode", "storedWasteKind", "storedWasteOrigin", "temperature"]},
 {"repoName": "dataModel.WasteManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WasteManagement.git", "dataModel": "WasteContainerIsle", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["features", "insertHolesNumber", "refWasteContainer"]},
 {"repoName": "dataModel.WasteManagement", "repoLink": "https://github.com/smart-data-models/dataModel.WasteManagement.git", "dataModel": "WasteContainerModel", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"image": "The image of the product."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["brandName", "cargoVolume", "category", "compliantWith", "depth", "features", "height", "insertHolesNumber", "madeOf", "madeOfCode", "manufacturerName", "maximumLoad", "modelName", "recommendedLoad", "weight", "width"]},
 {"repoName": "dataModel.Transportation", "repoLink": "https://github.com/smart-data-models/dataModel.Transportation.git", "dataModel": "BikeHireDockingStation", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"availableBikeNumber": "The number of bikes available in the bike hire docking station to be hired by users."},
 {"contactPoint": "A contact point for a person or organization."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"freeSlotNumber": "The number of slots available for returning and parking bikes. It must lower or equal than totalSlotNumber."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"openingHours": "The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day."},
 {"outOfServiceSlotNumber": "The number of slots that are out of order and cannot be used to hire or park a bike. It must lower or equal than totalSlotNumber."},
 {"owner": "The owner of the item."},
 {"provider": "Bike hire service provider."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"status": "Status of the bike hire docking station."},
 {"totalSlotNumber": "The total number of slots offered by this bike docking station."}], "descriptionMissing": []},
 {"repoName": "dataModel.Transportation", "repoLink": "https://github.com/smart-data-models/dataModel.Transportation.git", "dataModel": "CrowdFlowObserved", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"averageCrowdSpeed": "Average speed of the crowd transiting during the observation period."},
 {"averageHeadwayTime": "Average headway time. Headway time is the time elapsed between two consecutive persons."},
 {"congested": "Flags whether there was a crowd congestion during the observation period in the referred walkway. The absence of this attribute means no crowd congestion."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateObserved": "The date and time of this observation in ISO8601 UTC format. It can be represented by an specific time instant or by an ISO8601 interval.\nAs a workaround for the lack of support of Orion Context Broker for datetime intervals, it can be used two separate attributes: dateObservedFrom, dateObservedTo."},
 {"dateObservedFrom": "Observation period start date and time. See dateObserved."},
 {"dateObservedTo": "Observation period end date and time. See dateObserved."},
 {"description": "A description of the item"},
 {"direction": "Usual direction of travel in the walkway referred by this observation with respect to the city center."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"occupancy": "Fraction of the observation time where a person has been occupying the observed walkway."},
 {"owner": "The owner of the item."},
 {"peopleCount": "Total number of people detected during this observation period."},
 {"refRoadSegment": "Concerned road segment on which the observation has been mede."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Transportation", "repoLink": "https://github.com/smart-data-models/dataModel.Transportation.git", "dataModel": "EVChargingStation", "descriptionAvailable": [{"acceptedPaymentMethod": "Accepted payment method(s)"},
 {"address": "The mailing address."},
 {"allowedVehicleType": "Vehicle type(s) which can be charged."},
 {"alternateName": "An alias for the item."},
 {"amperage": "The total amperage offered by the charging station."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"availableCapacity": "The number of vehicles which currently can be charged."},
 {"capacity": "The total number of vehicles which can be charged at the same time. The total number of sockets can be higher."},
 {"chargeType": "Type(s) of charge when using this station."},
 {"contactPoint": "A contact point for a person or organization."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"image": "A URL containing a photo of this charging station."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"openingHours": "The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day."},
 {"owner": "The owner of the item."},
 {"socketNumber": "The total number of sockets offered by this charging station."},
 {"socketType": "The type of sockets offered by this station."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"status": "Status of the charging station"},
 {"voltage": "The total voltage offered by the charging station."}], "descriptionMissing": []},
 {"repoName": "dataModel.Transportation", "repoLink": "https://github.com/smart-data-models/dataModel.Transportation.git", "dataModel": "Road", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateObserved": "Specifies the URL to information about the provider of this information"},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"refRoadSegment": "Road segments which define this road."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["areaServed", "averageCrowdSpeed", "averageHeadwayTime", "congested", "dateObservedFrom", "dateObservedTo", "direction", "occupancy", "peopleCount"]},
 {"repoName": "dataModel.Transportation", "repoLink": "https://github.com/smart-data-models/dataModel.Transportation.git", "dataModel": "RoadSegment", "descriptionAvailable": [{"address": "The mailing address."},
 {"allowedVehicleType": "Vehicle type(s) allowed to transit through this road segment."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"category": "Allows to convey extra characteristics of a road segment."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"endKilometer": "The kilometer number (measured from the start point of the road) where this road segment ends."},
 {"laneUsage": "This attribute can be used to convey specific parameters describing each lane."},
 {"length": "Total length of this road segment in kilometers."},
 {"location": "The current location of the item"},
 {"maximumAllowedHeight": "Maximum allowed height for vehicles transiting this road segment."},
 {"maximumAllowedSpeed": "Maximum allowed speed while transiting this road segment. More restrictive limits might be applied to specific vehicle types (trucks, caravans, etc.)."},
 {"maximumAllowedWeight": "Maximum allowed weight for vehicles transiting this road segment."},
 {"minimumAllowedSpeed": "Minimum allowed speed while transiting this road segment."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"startKilometer": "The kilometer number (measured from the start point of the road) where this road segmnent starts."},
 {"totalLaneNumber": "Total number of lanes offered by this road segment."},
 {"width": "Segment width of the Road."}], "descriptionMissing": ["image"]},
 {"repoName": "dataModel.Transportation", "repoLink": "https://github.com/smart-data-models/dataModel.Transportation.git", "dataModel": "TrafficFlowObserved", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"averageGapDistance": "Average gap distance between consecutive vehicles."},
 {"averageHeadwayTime": "Average headway time. Headaway time is the time ellapsed between two consecutive vehicles."},
 {"averageVehicleLength": "Average length of the vehicles transiting during the observation period"},
 {"averageVehicleSpeed": "Average speed of the vehicles transiting during the observation period."},
 {"congested": "Flags whether there was a traffic congestion during the observation period in the referred lane. The absence of this attribute means no traffic congestion."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateObserved": "The date and time of this observation in ISO8601 UTC format. It can be represented by an specific time instant or by an ISO8601 interval.\nAs a workaround for the lack of support of Orion Context Broker for datetime intervals, it can be used two separate attributes:\ndateObservedFrom, dateObservedTo."},
 {"dateObservedFrom": "Observation period start date and time. See dateObserved."},
 {"dateObservedTo": "Observation period end date and time. See dateObserved."},
 {"description": "A description of the item"},
 {"intensity": "Total number of vehicles detected during this observation period."},
 {"laneDirection": "Usual direction of travel in the lane referred by this observation. \nThis attribute is useful when the observation is not referencing any road segment, \nallowing to know the direction of travel of the traffic flow observed."},
 {"laneId": "Lane identifier."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"occupancy": "Fraction of the observation time where a vehicle has been occupying the observed laned."},
 {"owner": "The owner of the item."},
 {"refRoadSegment": "Concerned road segment on which the observation has been mede."},
 {"reversedLane": "Flags whether traffic in the lane was reversed during the observation period. The absence of this attribute means no lane reversion."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"vehicleSubType": "allows to specify a sub type of vehicleType , eg if the vehicleType is set to Lorry the vehicleSubType may be OGV1 or OGV2 to convey more information about the exact type of vehicle"},
 {"vehicleType": "Type of vehicle from the point of view of its structural characteristics."}], "descriptionMissing": []},
 {"repoName": "dataModel.Transportation", "repoLink": "https://github.com/smart-data-models/dataModel.Transportation.git", "dataModel": "Vehicle", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"cargoWeight": "Current weight of the cargo of the vehicle"},
 {"category": "Vehicle category(ies) from an external point of view. This is different than the vehicle type (car, lorry, etc.) represented by the vehicleType property."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateFirstUsed": "Timestamp which denotes when the vehicle was first used."},
 {"dateVehicleFirstRegistered": "The date of the first registration of the vehicle with the respective public authorities."},
 {"description": "A description of the item"},
 {"feature": "Feature(s) incorporated by the vehicle."},
 {"fleetVehicleId": "The identifier of the vehicle in the context of the fleet of vehicles to which it belongs."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"purchaseDate": "The date the item e.g. vehicle was purchased by the current owner."},
 {"serviceProvided": "Service(s) the vehicle is capable of providing or it is assigned to."},
 {"serviceStatus": "Vehicle status (from the point of view of the service provided, so it could not apply to private vehicles)"},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"vehicleConfiguration": "A short text indicating the configuration of the vehicle, e.g. \"5dr hatchback ST 2.5 MT 225 hp\" or \"limited edition\"."},
 {"vehicleIdentificationNumber": "The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles."},
 {"vehiclePlateIdentifier": "An identifier or code displayed on a vehicle registration plate attached to the vehicle used for official identification purposes. The registration identifier is numeric or alphanumeric and is unique within the issuing authority region."},
 {"vehicleSpecialUsage": "Indicates whether the vehicle is been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale."},
 {"vehicleType": "Type of vehicle from the point of view of its structural characteristics. This is different than the vehicle category (see below)."}], "descriptionMissing": ["image", "mileageFromOdometer"]},
 {"repoName": "dataModel.Transportation", "repoLink": "https://github.com/smart-data-models/dataModel.Transportation.git", "dataModel": "VehicleModel", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"brandName": "Brand name of the Vehicle."},
 {"cargoVolume": "The available volume for cargo or luggage. For automobiles, this is usually the trunk volume."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"depth": "Depth of the Vehicle"},
 {"description": "A description of the item"},
 {"fuelConsumption": "The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km)."},
 {"fuelType": "The type of fuel suitable for the engine or engines of the vehicle."},
 {"height": "Height of the Vehicle"},
 {"image": "The image of the product."},
 {"location": "The current location of the item"},
 {"manufacturerName": "Name of the anufacturer of the vehicle."},
 {"modelName": "Model name of the vehicle"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"url": "Specifies the URL to information about the provider of this information"},
 {"vehicleEngine": "Information about the engine or engines of the vehicle."},
 {"vehicleModelDate": "The release date of a vehicle model (often used to differentiate versions of the same make and model)."},
 {"vehicleType": "Type of vehicle from the point of view of its structural characteristics."},
 {"weight": "Weight of the vehicle"},
 {"width": "Width of the vehicle"}], "descriptionMissing": []},
 {"repoName": "dataModel.PointOfInterest", "repoLink": "https://github.com/smart-data-models/dataModel.PointOfInterest.git", "dataModel": "Beach", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"refSeeAlso": "Additional information for the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["accessType", "beachType", "facilities", "length", "occupationRate", "width"]},
 {"repoName": "dataModel.PointOfInterest", "repoLink": "https://github.com/smart-data-models/dataModel.PointOfInterest.git", "dataModel": "Museum", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"contactPoint": "A contact point for a person or organization."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"refSeeAlso": "Additional information for the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["artPeriod", "buildingType", "facilities", "featuredArtist", "historicalPeriod", "museumType", "openingHoursSpecification", "touristArea"]},
 {"repoName": "dataModel.PointOfInterest", "repoLink": "https://github.com/smart-data-models/dataModel.PointOfInterest.git", "dataModel": "PointOfInterest", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "Alternative name for this point of interest."},
 {"category": "Category of this point of interest.\n\nAllowed values: Those defined by the [Factual taxonomy](https://github.com/Factual/places/blob/categories/factual_taxonomy.json)\ntogether with the extended categories described by the present\nspecification (see below). For instance the value `113` corresponds to\nbeaches, and the value `311` corresponds to museums.\n\n## Extended POI Categories\n\n| Category | Description                |\n| :------- | :------------------------- |\n| `1478`   | `Public drinking fountain` |\n| `1479`   | `Public toilet`            |\n| `1480`   | `Registry office`          |"},
 {"contactPoint": "A contact point for a person or organization."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"refSeeAlso": "Additional information for the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["areaServed"]},
 {"repoName": "dataModel.Device", "repoLink": "https://github.com/smart-data-models/dataModel.Device.git", "dataModel": "Device", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"batteryLevel": "Device's battery level. It must be equal to `1.0` when battery is full. `0.0` when battery \u00ecs empty.\n`-1` when transiently cannot be determined."},
 {"category": "See attribute category from DeviceModel. Optional but recommended to optimize queries."},
 {"configuration": "Device's technical configuration. This attribute is intended to be a dictionary of properties which capture parameters\nwhich have to do with the configuration of a device (timeouts, reporting periods, etc.) and which are not currently \ncovered by the standard attributes defined by this model."},
 {"controlledAsset": "The asset(s) (building, object, etc.) controlled by the device."},
 {"controlledProperty": "See attribute `controlledProperty` from [DeviceModel](../../DeviceModel/doc/spec.md). Optional but recommended to optimize queries."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateFirstUsed": "A timestamp which denotes when the device was first used."},
 {"dateInstalled": "A timestamp which denotes when the device was installed (if it requires installation)."},
 {"dateLastCalibration": "A timestamp which denotes when the last calibration of the device happened."},
 {"dateLastValueReported": "A timestamp which denotes the last time when the device successfully reported data to the cloud."},
 {"dateManufactured": "A timestamp which denotes when the device was manufactured."},
 {"description": "A description of the item"},
 {"deviceState": "State of this device from an operational point of view. Its value can be vendor dependent."},
 {"firmwareVersion": "The firmware version of this device."},
 {"hardwareVersion": "The hardware version of this device."},
 {"ipAddress": "The IP address of the device. It can be a comma separated list of values if the device has more than one IP address."},
 {"location": "The current location of the item"},
 {"macAddress": "he MAC address of the device."},
 {"mcc": "Mobile Country Code - This property identifies univoquely the country of the mobile network the device is attached to."},
 {"mnc": "This property identifies the Mobile Network Code (MNC) of the network the device is attached to. The MNC is used in combination with a \nMobile Country Code (MCC) (also known as a \"MCC / MNC tuple\") to uniquely identify a mobile phone operator/carrier using the GSM, CDMA, \niDEN, TETRA and 3G / 4G public land mobile networks and some satellite mobile networks."},
 {"name": "The name of the item"},
 {"osVersion": "The version of the host operating system device."},
 {"owner": "The owner of the item."},
 {"provider": "The provider of the device."},
 {"refDeviceModel": "Reference to an entity of type DeviceModel."},
 {"rssi": "Received signal strength indicator for a wireless enabled device. It must be equal to `1.0` when the signal\nstrength is maximum. `0.0` when signal is missing. `-1.0` when it cannot be determined.'"},
 {"serialNumber": "The serial number assigned by the manufacturer."},
 {"softwareVersion": "The software version of this device."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"value": "A observed or reported value. For actuator devices, it is an attribute that allows a controlling application to \nchange the actuation setting. For instance, a switch device which is currently _on_ can report a value `\"on\"` of type Text. \nObviously, in order to toggle the referred switch, this attribute value will have to be changed to `\"off\"`"}], "descriptionMissing": ["supportedProtocol"]},
 {"repoName": "dataModel.Device", "repoLink": "https://github.com/smart-data-models/dataModel.Device.git", "dataModel": "DeviceModel", "descriptionAvailable": [{"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"brandName": "Device's brand name."},
 {"category": "Device's category(ies)."},
 {"color": "The color of the product."},
 {"controlledProperty": "Anything that can be sensed, measured or controlled by."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"deviceClass": "Class of constrained device as specified by RFC 7228. If the\ndevice is not a constrained device this property shall not be present."},
 {"documentation": "A link to device's documentation."},
 {"energyLimitationClass": "Device's class of energy limitation as per [RFC 7228](https://tools.ietf.org/html/rfc7228#section-3\").\n\n-   `E0` - Event energy-limited \n-   `E1` - Period energy-limited \n-   `E2` - Lifetime energy-limited \n-   `E9` - No direct quantitative limitations to available energy"},
 {"function": "The functionality necessary to accomplish the task for which a\nDevice is designed. A device can be designed to perform more than one\nfunction. Defined by [SAREF](https://w3id.org/saref#Function)."},
 {"image": "The image of the product."},
 {"manufacturerName": "Device's manufacturer name."},
 {"modelName": "Device's model name."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"supportedProtocol": "Supported protocol(s) or networks."},
 {"supportedUnits": "Units of measurement supported by the device. Allowed values The unit code (text) of measurement given using the\n[UN/CEFACT Common Code](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)\n(max. 3 characters)."}], "descriptionMissing": []},
 {"repoName": "dataModel.Streetlighting", "repoLink": "https://github.com/smart-data-models/dataModel.Streetlighting.git", "dataModel": "Streetlight", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"image": "The image of the product."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["circuit", "controllingMethod", "dateLastLampChange", "dateLastSwitchingOff", "dateLastSwitchingOn", "dateServiceStarted", "illuminanceLevel", "laternHeight", "locationCategory", "powerState", "refDevice", "status"]},
 {"repoName": "dataModel.Streetlighting", "repoLink": "https://github.com/smart-data-models/dataModel.Streetlighting.git", "dataModel": "StreetlightControlCabinet", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"image": "The image of the product."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["activePowerR", "activePowerS", "activePowerT", "brandName", "compliantWith", "cosPhi", "cupboardMadeOf", "dateLastProgramming", "dateMeteringStarted", "dateServiceStarted", "energyConsumed", "energyCost", "features", "frequency", "intensityR", "intensityS", "intensityT", "lastMeterReading", "manufacturerName", "maximumPowerAvailable", "meterReadingPeriod", "modelName", "nextActuationDeadline", "powerFactorR", "powerFactorS", "powerFactorT", "reactiveEnergyConsumed", "reactivePowerR", "reactivePowerS", "reactivePowerT", "refDevice", "refStreetlightGroup", "responsible", "serialNumber", "thdrIntensityR", "thdrIntensityS", "thdrIntensityT", "thdrVoltageR", "thdrVoltageS", "thdrVoltageT", "totalActivePower", "totalReactivePower", "voltageR", "voltageS", "voltageT", "workingMode"]},
 {"repoName": "dataModel.Streetlighting", "repoLink": "https://github.com/smart-data-models/dataModel.Streetlighting.git", "dataModel": "StreetlightGroup", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"image": "The image of the product."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["activeProgramId", "dateLastSwitchingOff", "dateLastSwitchingOn", "illuminanceLevel", "powerState", "refStreetlight", "switchingMode", "switchingOnHours"]},
 {"repoName": "dataModel.Streetlighting", "repoLink": "https://github.com/smart-data-models/dataModel.Streetlighting.git", "dataModel": "StreetlightModel", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"annotations": "A field reserved for annotations (incidences, remarks, etc.)."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"color": "The color of the product."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"image": "The image of the product."},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["category", "colorRenderingIndex", "colorTemperature", "columnBrandName", "columnColor", "columnMadeOf", "columnManufacturerName", "columnModelName", "compliantWith", "lampBrandName", "lampManufacturerName", "lampModelName", "lampTechnology", "lampWeight", "lanternBrandName", "lanternManufacturerName", "lanternModelName", "lanternWeight", "luminousFlux", "maxPowerConsumption", "minPowerConsumption", "powerConsumption", "workingLife"]},
 {"repoName": "dataModel.IssueTracking", "repoLink": "https://github.com/smart-data-models/dataModel.IssueTracking.git", "dataModel": "Open311_ServiceRequest", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.IssueTracking", "repoLink": "https://github.com/smart-data-models/dataModel.IssueTracking.git", "dataModel": "Open311_ServiceType", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Energy", "repoLink": "https://github.com/smart-data-models/dataModel.Energy.git", "dataModel": "ThreePhaseAcMeasurement", "descriptionAvailable": [{"activeEnergyExport": "Active energy exported per phase since the metering start date. The actual values will be conveyed by subproperties which names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"activeEnergyImport": "Active energy imported i.e. consumed per phase since the metering start date. The actual values will be conveyed by subproperties which names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"activePower": "Active power consumed per phase. The actual values will be conveyed by subproperties which names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"apparentEnergyExport": "Apparent energy exported per phase since the metering start date. The actual values will be conveyed by subproperties which names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"apparentEnergyImport": "Apparent energy imported i.e. consumed per phase since the metering start date. The actual values will be conveyed by subproperties which names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"apparentPower": "Apparent power consumed per phase. The actual values will be conveyed by subproperties which names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"current": "Electrical current. The actual values will be conveyed by one subproperty per alternating current phase and the neutral wire: L1, L2, L3 and N."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateEnergyMeteringStarted": "The starting date for metering energy."},
 {"description": "A description of the item"},
 {"displacementPowerFactor": "Displacement power factor for each phase. The quantity is based on the fundamental frequency of the system. The actual values will be conveyed by one subproperty per alternating current phase: L1, L2 and L3"},
 {"frequency": "The frequency of the circuit"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"phaseToPhaseVoltage": "Voltage between phases. A value for each phase pair: phases 1 and 2 (L12), phases 2 and 3 (L32), phases 3 and 1 (L31)."},
 {"phaseVoltage": "The voltage between each phase and neutral conductor. The actual values will be conveyed by one subproperty per alternating current phase: L1, L2 and L3"},
 {"powerFactor": "Power factor for each phase. The actual values will be conveyed by one subproperty per alternating current phase: L1, L2 and L3"},
 {"reactiveEnergyExport": "Fundamental frequency reactive energy exported per phase since the metering start date. The actual values will be conveyed by subproperties which names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"reactiveEnergyImport": "Fundamental frequency reactive energy imported i.e. consumed per phase since the metering start date. The actual values will be conveyed by subproperties which names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"reactivePower": "Fundamental frequency reactive power. The actual values will be conveyed by subproperties whose names will be equal to the name of each of the alternating current phases: L1, L2, L3."},
 {"refDevice": "Device(s) used to obtain the measurement."},
 {"refTargetDevice": "Device(s) for which the measurement was taken."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"thdCurrent": "Total harmonic distortion of electrical current. The actual values will be conveyed by one subproperty per alternating current phase: L1, L2 and L3"},
 {"thdVoltage": "Total harmonic distortion of voltage for each phase. The actual values will be conveyed by one subproperty per alternating current phase: L1, L2 and L3"},
 {"totalActiveEnergyExport": "Total energy exported since metering started (since dateEnergyMeteringStarted)."},
 {"totalActiveEnergyImport": "Total energy imported i.e. consumed since metering started (since dateEnergyMeteringStarted)."},
 {"totalActivePower": "Active power consumed (counting all phases)"},
 {"totalApparentEnergyExport": "Total energy exported (with regards to apparent power) since the metering start date (dateEnergyMeteringStarted)."},
 {"totalApparentEnergyImport": "Total energy imported i.e. consumed (with regards to apparent power) since the metering start date (dateEnergyMeteringStarted)."},
 {"totalApparentPower": "Apparent power consumed (counting all phases)."},
 {"totalDisplacementPowerFactor": "Displacement power factor including all phases. The quantity is based on the fundamental frequency of the system"},
 {"totalPowerFactor": "Power factor including all phases."},
 {"totalReactiveEnergyExport": "Total fundamental frequency reactive energy exported since metering started (since dateEnergyMeteringStarted)."},
 {"totalReactiveEnergyImport": "Total energy imported i.e. consumed (with regards to fundamental frequency reactive power) since the metering start date (dateEnergyMeteringStarted)."},
 {"totalReactivePower": "Reactive power consumed (counting all phases)."}], "descriptionMissing": []},
 {"repoName": "dataModel.Building", "repoLink": "https://github.com/smart-data-models/dataModel.Building.git", "dataModel": "Building", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "Alternate Name of the Building"},
 {"areaServed": "Higher level area to which the building belongs to. It can be used to group buildings by district, neighbourhood, etc."},
 {"containedInPlace": "The enclosing area the Building lies within"},
 {"category": "### Accommodation\n\n-   `apartments` -  A building arranged into individual dwellings, often on separate floors. May also have retail outlets on the ground floor.  \n-   `bungalow` -  A single-storey detached small house, Dacha.  \n-   `cabin` - A cabin is a small, roughly built house usually with a wood exterior and typically found in rural areas.  \n-   `detached` -  A detached house, a free-standing residential building usually housing a single family. \n-   `dormitory` - For a shared building, as used by college/university students (not a share room for multiple occupants as implied by the term in British English). Alternatively, use building=residential plus residential=university. \n-   `farm` -  A residential building on a farm (farmhouse). For other buildings see below building=farm_auxiliary, building=barn, \u2026 If in your country farmhouse looks same as general residential house then you can tag as building=house as well. See also landuse=farmyard for the surrounding area \n-   `ger` -  A permanent or seasonal round yurt or ger used as dwelling. \n-   `hotel` -  A building designed with separate rooms available for overnight accommodation. Normally used in conjunction with tourism=hotel for the hotel grounds including recreation areas and parking.  \n-   `house` -  A dwelling unit inhabited by a single household (a family or small group sharing facilities such as a kitchen). Houses forming half of a semi-detached pair, or one of a row of terraced houses, should share at least two nodes with joined neighbours, thereby defining the party wall between the properties.  \n-   `houseboat` -  A boat used primarily as a home \n-   `residential` -  A general tag for a building used primarily for residential purposes. Where additional detail is available consider using 'apartments', 'terrace', 'house', 'detached' or 'semidetached_house'. \n-   `semidetached_house` -  A residential house that shares a common wall with another on one side. \n-   `static_caravan` -  A mobile home (semi)permanently left on a single site \n-   `terrace` - A single way used to define the outline of a linear row of residential dwellings, each of which normally has its own entrance, which form a terrace (row-house in North American English). Consider defining each dwelling separately using 'house'.  \n\n### Commercial\n\n-   `commercial` -  A building where non-specific commercial activities take place, not necessarily an office building. Consider tagging the surrounding area using landuse=commercial. Use 'retail' if the building consists primarily of shops. \n-   `industrial` -  A building where some industrial process takes place. Use warehouse if the purpose is known to be primarily for storage/distribution. Consider using landuse=industrial for the surrounding area and the proposed industrial=* tag to describe the industrial activity. \n-   `kiosk` - A small one-room retail building. \n-   `office` -  An office building. Use building=office with office=* to describe the type of office. Consider tagging the surrounding area using landuse=commercial. Use 'retail' if the building consists primarily of shops. \n-   `retail` -  A building primarily used for selling goods that are sold to the public; use shop=* to identify the sort of goods sold or an appropriate amenity=* (pub, cafe, restaurant, etc.). Consider use landuse=retail for the surrounding area. \n-   `supermarket` - A building constructed to house a self-service large-area store.  \n-   `warehouse` - A building primarily used for the storage or goods or as part of a distribution system. \n\n### Religious\n\n-   `cathedral` - A building that was built as a cathedral. Used in conjunction with amenity=place_of_worship, religion=*, denomination=* and landuse=religious for the cathedral grounds where it is in current use. \n-   `chapel` -  A building that was built as a chapel. Used in conjunction with amenity=place_of_worship, religion=*, denomination=* and landuse=religious for the chapel grounds where it is in current use. \n-   `church` -  A building that was built as a church. Used in conjunction with amenity=place_of_worship, religion=* , denomination=* and landuse=religious for the church grounds where it is in current use.  \n-   `mosque` -  A mosque. Used in conjunction with amenity=place_of_worship, religion=*, denomination=* and landuse=religious for the grounds where it is in current use. \n-   `religious` - Unspecific religious building. Prefer more specific values if possible. \n-   `shrine` -  A building that was built as a shrine. Used in conjunction with amenity=place_of_worship, religion=*, denomination=* and landuse=religious for the grounds where it is in current use. Small buildings should consider historic=wayside_shrine. \n-   `synagogue` - A building that was built as a synagogue. Used in conjunction with amenity=place_of_worship, religion=*, denomination=* and landuse=religious for the grounds where it is in current use. \n-   `temple` -  A building that was built as a temple. Used in conjunction with amenity=place_of_worship, religion=*, denomination=* and landuse=religious for the grounds where it is in current use.  \n\n### Civic/Amenity\n\n-   `bakehouse` - A building that was built as a bakehouse (i.e. for baking bread). Often used in conjunction with another node amenity=baking_oven and oven=wood_fired.  \n-   `civic` - For any civic amenity, for example amenity=community_centre, amenity=library, amenity=toilets, leisure=sports_centre, leisure=swimming_pool, amenity=townhall etc. Use amenity=* or leisure=* etc. to provide further details. See building=public as well. \n-   `fire_station` -  A building which houses fire fighting equipment ready for use. Use amenity=fire_station for the fire station grounds. \n-   `government` -  For government buildings in general, including municipal, provincial and divisional secretaries, government agencies and departments, town halls, (regional) parliaments and court houses.  \n-   `hospital` -  A building which forms part of a hospital. Use amenity=hospital for the hospital grounds. \n-   `kindergarten` -  For any generic kindergarten buildings. Buildings for specific uses (sports halls etc.) should be tagged for their purpose. Use amenity=kindergarten for the perimeter of the kindergarten grounds. \n-   `public` -  A building constructed as accessible to the general public (a town hall, police station, court house, etc.).  \n-   `school` -  For any generic school buildings. Buildings for specific uses (sports halls etc.) should be tagged for their purpose. Use amenity=school for the perimeter of the school grounds. \n-   `toilets` - A toilet block. \n-   `train_station` - A building constructed to be a train station building, including buildings that are abandoned and used nowadays for a different purpose.  \n-   `transportation` -  A building related to public transport. You will probably want to tag it with proper transport related tag as well, such as public_transport=station. Note that there is a special tag for train station buildings -   `building=train_station.  \n-   `university` -  A university building. Use amenity=university for the whole university area.  \n\n### Agricultural/Plant production\n\n-   `barn` -  An agricultural building used for storage and as a covered workplace. \n-   `conservatory` -  A building or room having glass or tarpaulin roofing and walls used as an indoor garden or a sunroom (winter garden). \n-   `cowshed` - A cowshed (cow barn, cow house) is a building for housing cows, usually found on farms. \n-   `farm_auxiliary` -  A building on a farm that is not a dwelling (use 'farm' or 'house' for the farm house). \n-   `greenhouse` -  A greenhouse is a glass or plastic covered building used to grow plants. Use landuse=greenhouse_horticulture for an area containing multiple greenhouses  \n-   `stable` -  A stable is a building where horses are kept. \n-   `sty` - A sty (pigsty, pig ark, pig-shed) is a building for raising domestic pigs, usually found on farms.  \n\n### Sports\n\n-   `grandstand` -  The main stand, usually roofed, commanding the best view for spectators at racecourses or sports grounds. \n-   `pavilion` -  A sports pavilion usually with changing rooms, storage areas and possibly an space for functions & events. Avoid using this term for other structures called pavilions by architects (see [W] Pavilion) \n-   `riding_hall` - A building that was built as a riding hall. \n-   `sports_hall` - A building that was built as a sports hall. \n-   `stadium` - A building constructed to be a stadium building, including buildings that are abandoned and used nowadays for a different purpose.  \n\n### Storage\n\n-   `hangar` -  A hangar is a building used for the storage of airplanes, helicopters or space-craft. Consider adding `aeroway=hangar`, when appropriate. \n-   `hut` - A hut is a small and crude shelter. Note that this word has two meanings -   it may be synonym of `building=shed`, it may be a residential building of low quality. \n-   `shed` -  A shed is a simple, single-storey structure in a back garden or on an allotment that is used for storage, hobbies, or as a workshop.  \n\n### Cars\n\n-   `carport` - A carport is a covered structure used to offer limited protection to vehicles, primarily cars, from the elements. Unlike most structures a carport does not have four walls, and usually has one or two.  \n-   `garage` -  A garage is a building suitable for the storage of one or possibly more motor vehicle or similar. See `building=garages` for larger shared buildings. For an aircraft garage, see building=hangar.  \n-   `garages` - A building that consists of a number of discrete storage spaces for different owners/tenants. See also `building=garage`. \n-   `parking` - Structure purpose-built for parking cars. \n\n### Power/Technical buildings\n\n-   `digester` -  A digester is a bioreactor for the production of inflatable biogas from biomass.  \n-   `service` - Service building usually is a small unmanned building with certain machinery (like pumps or transformers).  \n-   `transformer_tower` - A transformer tower is a characteristic tall building comprising a distribution transformer and constructed to connect directly to a medium voltage overhead power line. Quite often the power line has since been undergrounded but the building may still serve as a substation. If the building is still in use as a substation it should additionally be tagged as power=substation + substation=minor_distribution.  \n-   `water_tower` - A water tower \n\n### Other Buildings\n\n-   `bunker` -  A hardened military building. Also use `military=bunker`. \n-   `bridge` -  A building used as a bridge. Can also represent a gatehouse for drawbridges. See also bridge=yes for highway=*. Don't use this tag just for marking bridges (their outlines). For such purposes use man_made=bridge.  \n-   `construction` -  Used for buildings under construction. Use construction=* to hold the value for the completed building. \n-   `roof` -  A structure that consists of a roof with open sides, such as a rain shelter, and also gas stations  \n-   `ruins` - Frequently used for a house or other building that is abandoned and in poor repair. However, some believe this usage is incorrect, and the tag should only be used for buildings constructed as fake ruins (for example sham ruins in an English landscape garden). \n-   `tree_house` -  An accommodation, often designed as a small hut, sometimes also as a room or small apartment. Built on tree posts or on a natural tree. A tree house has no contact with the ground. Access via ladders, stairs or bridgeways."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"floorsAboveGround": "Number of floors above ground within the building"},
 {"floorsBelowGround": "Number of floors below ground within the building"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"occupier": "Link to the occupiers of the building"},
 {"openingHours": "The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day."},
 {"owner": "The owner of the item."},
 {"refMap": "The URL holding a map of the building"},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": []},
 {"repoName": "dataModel.Building", "repoLink": "https://github.com/smart-data-models/dataModel.Building.git", "dataModel": "BuildingOperation", "descriptionAvailable": [{"alternateName": "Alternate Name of the Building"},
 {"dataProvider": "Specifies the URL to information about the provider of this information"},
 {"dateFinished": "The actual end date for the operation"},
 {"dateStarted": "The actual start date for the operation."},
 {"description": "A description of the item"},
 {"endDate": "The planned end date for the operation."},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["operationSequence", "operationType", "refRelatedBuildingOperation", "refRelatedDeviceOperation", "result", "startDate", "status"]},
 {"repoName": "dataModel.Environment", "repoLink": "https://github.com/smart-data-models/dataModel.Environment.git", "dataModel": "AeroAllergenObserved", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["allergenRisk", "dateObserved"]},
 {"repoName": "dataModel.Environment", "repoLink": "https://github.com/smart-data-models/dataModel.Environment.git", "dataModel": "AirQualityObserved", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"as": "Arsenic"},
 {"c6h6": "Benzene"},
 {"cd": "Cadmium"},
 {"co": "Carbon Monoxide"},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"ni": "Nickel"},
 {"no": "Nitrogen monoxide"},
 {"no2": "Nitrogen dioxide"},
 {"o3": "ozone"},
 {"owner": "The owner of the item."},
 {"pb": "Lead"},
 {"pm10": "Particulate matter 10 micrometers or less in diameter"},
 {"pm25": "Particulate matter 2.5 micrometers or less in diameter"},
 {"sh2": "Hydrogen sulfide"},
 {"so2": "Sulfur dioxide"},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"volatileOrganicCompoundsTotal": "Alkanes <C10, ketones <C6, aldehydes <C10, carboxylic acids <C5,\naspirits<C7, Alkenes <C8, Aromatics"}], "descriptionMissing": ["airQualityIndex", "airQualityLevel", "dateObserved", "reliability"]},
 {"repoName": "dataModel.Environment", "repoLink": "https://github.com/smart-data-models/dataModel.Environment.git", "dataModel": "NoiseLevelObserved", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["dateObserved", "dateObservedFrom", "dateObservedTo", "sonometerClass"]},
 {"repoName": "dataModel.Environment", "repoLink": "https://github.com/smart-data-models/dataModel.Environment.git", "dataModel": "WaterObserved", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["dateObserved", "dateObservedFrom", "dateObservedTo", "flow", "height", "measuredArea", "objectArea", "objectHeightAverage", "objectHeightMax", "objectVolume", "swellDirection", "swellHeight", "swellPeriod", "waveLength"]},
 {"repoName": "dataModel.Environment", "repoLink": "https://github.com/smart-data-models/dataModel.Environment.git", "dataModel": "WaterQualityObserved", "descriptionAvailable": [{"address": "The mailing address."},
 {"alternateName": "An alias for the item."},
 {"areaServed": "The geographic area where a service or offered item is provided."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"description": "A description of the item"},
 {"location": "The current location of the item"},
 {"name": "The name of the item"},
 {"owner": "The owner of the item."},
 {"source": "A sequence of characters giving the source of the entity data"}], "descriptionMissing": ["Chla", "Cl-", "NH3", "NH4", "NO3", "O2", "PC", "PE", "conductance", "conductivity", "dateObserved", "measurand", "orp", "pH", "salinity", "tds", "temperature", "tss", "turbidity"]},
 {"repoName": "dataModel.Alert", "repoLink": "https://github.com/smart-data-models/dataModel.Alert.git", "dataModel": "alert", "descriptionAvailable": [], "descriptionMissing": ["subCategory"]},
 {"repoName": "dataModel.Battery", "repoLink": "https://github.com/smart-data-models/dataModel.Battery.git", "dataModel": "Battery", "descriptionAvailable": [{"acPowerInput": "A measurement at input present only present if the battery work with AC. This is like the consumption measurement for the battery."},
 {"acPowerOutput": "A measurement present only if battery gives output in AC"},
 {"autonomyTime": "time duration expressed in 8601 duration until drain battery."},
 {"cicleLife": "A number of reference of discharge-charge cycles until the battery decrease its performance"},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dcPowerInput": "A measurement at input present only present if the battery work with DC. This is like the consumption measurement for the battery."},
 {"dcPowerOutput": "A measurement present only if battery gives output in DC"},
 {"location": "The current location of the item"},
 {"rechargeTime": "Time duration expressed in 8601 duration until re fill 100 the battery."},
 {"refDevice": "A reference to the device(s) Entity device which it use this battery."},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"status": "Status of the battery. Allowed values: (`working`, `outOfService`, `withIncidence`)"}], "descriptionMissing": []},
 {"repoName": "dataModel.Battery", "repoLink": "https://github.com/smart-data-models/dataModel.Battery.git", "dataModel": "BatteryStatus", "descriptionAvailable": [{"acPowerInput": "A instantaneous measurement at input present only present if the battery work with AC. This is like the consumption measurement for the battery. Default unit: KWT, The unit code (text) of measurement given using the UN/CEFACT Common Code (max. 3 characters)."},
 {"acPowerOutput": "A instantaneous measurement present only if battery gives output in AC. Default unit: KWT, The unit code (text) of measurement given using the UN/CEFACT Common Code (max. 3 characters)."},
 {"dataProvider": "Specifies the URL to information about the provider of this information."},
 {"dateObserved": "The date and time of this observation in ISO8601 UTCformat. It can be represented by an specific time instant or by an ISO8601 interval."},
 {"dcPowerInput": "A instantaneous measurement present only if battery take input in DC. This is like the consumption measurement of the battery. This is like the consumption measurement for the battery. Default unit: KWT, The unit code (text) of measurement given using the UN/CEFACT Common Code (max. 3 characters)."},
 {"dcPowerOutput": "A instantaneous measurement present only if battery take input in DC. Default unit: KWT, The unit code (text) of measurement given using the UN/CEFACT Common Code (max. 3 characters)."},
 {"refBattery": "A Reference to an an entity or list of entities of type Battery"},
 {"source": "A sequence of characters giving the source of the entity data"},
 {"status": "The battery can be no giving (or not) energy and the same time consuming (or not energy)"},
 {"statusPercent": "A measure in percentage of the remaining energy stored in the battery. Allowed values: Any positive integer between 0 number and 100."}], "descriptionMissing": []}]